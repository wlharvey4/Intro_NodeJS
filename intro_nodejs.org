# -*- mode:org; fill-column:79; -*-

#+TITLE:Introduction to NodeJS
#+SUBTITLE:Microsoft DEV283x
#+DATE:September 30, 2018
#+AUTHOR:Azat Mardan
#+VERSION:0.0.3 <2019-04-27 Sat 21:54>

* Introduction
** Welcome
*** Before You Start

[[file:videos/0.1.Before_You_start.mp4][Before You Start video]]

[[https://www.youtube.com/embed/aR9jcJp1FII?controls=0&wmode=transparent&rel=0&showinfo=0&enablejsapi=1&modestbranding=1&cc_load_policy=0&html5=1&origin=https%253A%252F%252Fcourses.edx.org&widgetid=7][Before You Start YouTube]]

Hello and welcome to this online course from Microsoft Learning.  >> At
Microsoft our mission is empower every person and every organization to achieve
more.  >> Our EdX courses, taught by Microsoft experts, let you learn cutting
edge technologies through hands on experience.  >> Whether you're a student or
a seasoned technologist we can empower you to build innovative applications,
services and experiences.

>> So what are the requirements for course completion?  Well, time.  >> On
average our courses have four modules, which are two to four hours each.  >>
Watch the videos, including presentations and demonstrations.  >> Like you
would attend a lecture on campus.  >> Complete course readings or projects and
hands on learning activities.  >> These are your homework assignments and
probably where you will learn most.  >> Take quizzes to help you prepare for
the assessment.  >> The assessments can only be taken once and you need a
passing grade to successfully complete the course.  >> Our courses are free as
all learning should be.  >> For a shareable, verified certificate, there is the
fee.

>> While our courses offer different experiences, all of them shared a similar
approach.  >> Please review the About page to find specific information about
your course.  >> For example, some courses release all content immediately.  >>
While others release modules incrementally over time.  >> Are part of a larger
learning program.  >> Many require an Azure or Office 365 subscription.  >>
Many students use a free trial subscription.  >> Offer opportunities to engage
with instructors and peers.  >> The most common indicators of success among the
more than 2 million learners that experienced our online courses are >>
Dedicating enough time to the course.  >> Demonstrating perseverance.  >> And
participating in the discussion groups.  >> Welcome to the world of Microsoft
technology.  Choose a path and make your mark.

*** Welcome to Introduction to Node.js
Welcome to Introduction to Node.js on edX. In this course, you will not only
learn the foundation of Node.js, but you will also build practical skills which
you can use in your day-to-day job. You will be able to harness the power of
Express and MongoDB and be ready to build your own web applications using
Node.js. You will impress your friends, co-workers and your boss with these
newly acquired skills.

But before we start, let me introduce myself first. My name is Azat Mardan. I'm
the founder of Node University and author of Practical Node.js as well as other
14 books on Node and JavaScript. I've been using Node since it's earlier years
and have been teaching it at conferences, workshops and webinars for the past
five years.

I work as a Technology Fellow at Capital One (top 10 US bank and a Fortune 500
company) where I help to bring innovation and best software engineering
practices. In my spare time, I write about Node and JavaScript on my blog
Webapplog.com and Node.University.

**** Video and Transcript
[[https://www.youtube.com/embed/dcOXqvXEWCI?controls=0&wmode=transparent&rel=0&showinfo=0&enablejsapi=1&modestbranding=1&cc_load_policy=0&html5=1&origin=https%253A%252F%252Fcourses.edx.org&widgetid=8][Video]]

{{{heading(Transcript)}}}

Hello, everyone. Welcome to this edx course, Introduction to Node.js.  In this
course, you will learn practical skills necessary to get you started developing
with Node.js.  I'm really excited to teach this course because I believe that
Node.js is one of the greatest technologies which will allow you to develop
application rapidly.

Who am I? My name is Azat Mardan.  I wrote a book called Practical Node.js
which was number one on Amazon for many months on the topic of Node.js.  And I
was early adopter of Node.js working at such companies such as Storify and
DocuSign.  Later on, I founded a non-scholar online school called Node
University.  And I write about JavaScript and Node.js on my blog, webapplog and
Node university.

I'm really enthusiastic about Node.js and I really appreciate you taking the
time to learn this amazing technology.  Welcome to the course, and I'll see you
in the next video.

** Overview

This course will cover the Node core modules, Express, MongoDB and
Mongoose. Here is a detailed overview of the course:

{{{heading(Module 0: Introduction)}}}
1. Welcome to Introduction to Node.js
2. Course Overview
3. Why Node.js
4. Node in Modern Web Development
5. Module 0 Assignment Lab---Introductions
6. Pre-course Survey


{{{heading(Module 1: Node Core)}}}
1. Node Core Overview
2. Installation and Recommended Tool Chain
3. Launching Node, Globals and Process
4. Node Modules with require and modules.exports
5. Core modules
6. Understanding event emitters
7. HTTP client with core http
8. HTTP server with core http
9. Npm basics
10. Summary of Module 1---Node Core
11. Module 1 Tutorial Lab---Node Web Crawler
12. Module 1 Assignment Lab---CSV to JSON Converter
13. Module 1 Assessment


{{{heading(Module 2: Express Framework)}}}
1. Express Overview
2. Why Express and Express Installations
3. Hello World with Express
4. Creating and Using Middleware
5. Implementing REST API Routing
6. URL Parameters, Query Strings and Input Validation
7. Summary of Module 2---Express Framework
8. Module 2 Tutorial Lab 1---REST API with Express
9. Module 2 Assignment Lab---RESTful Blog API
10. Module 2 Assessment


{{{heading(Module 3: Persistence with MongoDB)}}}
1. MongoDB Overview
2. MongoDB Basics
3. MongoDB Native Driver
4. MongoDB GUI Client MongoUI
5. Summary of Module 3: Persistence with MongoDB
6. Module 3 Tutorial Lab: CRUD REST API with Node, Express and MongoDB
7. Module 3 Assignment Lab: MongoDB Migration Node script
8. Module 3 Assessment


{{{heading(Module 4: Working with Mongoose ODM)}}}
1. Mongoose Overview
2. Working with Mongoose and its Schemas
3. Working with Mongoose Models
4. Creating Mongoose Hooks and Methods
5. Advanced Mongoose Features
6. Summary of Module 4: Working with Mongoose ODM
7. Module 4 Tutorial Lab: Relational queries with Mongoose
8. Module 4 Assignment Lab: REST API with Mongoose
9. Module 4 Assessment


{{{heading(Module 5: Final Assessment)}}}
1. Final Assessment
2. Post-Course Survey
3. Course Summary

*** Video and Transcript
[[https://www.youtube.com/embed/OjPd4eM1MDU?controls=0&wmode=transparent&rel=0&showinfo=0&enablejsapi=1&modestbranding=1&cc_load_policy=0&html5=1&origin=https%253A%252F%252Fcourses.edx.org&widgetid=1][Video]]

{{{heading(Transcript)}}}

In this video, I will tell you what we will cover in this course.

The course is broken down into four modules.

{{{heading(Module One: Introduction to Core Node.js Concepts)}}}
In module number one, we will cover core Node.js concepts such as how to launch
a script, how to work with the core modules such as HTTP and FS, and a few
other modules, what are globals, and how to import files and also export to
create modules.  We will build simple HTTP clients and HTTP servers.

{{{heading(Module Two:The Express Framework)}}}
In module number two, we will progress to Express framework.  Most developers
do not develop just with core modules.  They use libraries and frameworks.  So,
we will use Express framework to build RESTful API server.  The RESTful API
server will have four operations.  Main operations such as create, read, update
and delete, CRUD.

{{{heading(Module Three: Persistence with MongoDB)}}}
In module number three, we will cover the persistence, and we would use
database MongoDB.  MongoDB, it's a nosql database and it plays nicely with
Node.js.  They both have JavaScript interface.  So we would leverage MongoDB
and its native driver, which is the Node.js library, to enhance our RESTful
CRUD API.  So our RESTful CRUD API, at the end of the module three, will have
persistent layer in the form of MongoDB database.

{{{heading(Module Four: Mongoose Object Document Mapper)}}}
Finally, in the module number four, we will take it to the next level and we
will start using Mongoose, which is object document mapper.  If you're familiar
with ORM libraries, ODM, or object document mapper, it's very similar.  It
provides you a level of abstraction, so you don't have to work with the
database methods directly.  You can work with objects and that provides you
more convenient way.  Also, Mongoose has a lot of features and methods, so we
will cover them in module four.

{{{heading(Conclusion)}}}
At the end of this course, you will have a great overview and a lot of skills
around the foundation of Node.js, as well as NPM, and MongoDB.  And you will
have practical skills, and you would build few applications yourselves from
scratch that will give you enough confidence and enough skills to start
developing your own applications.

** Why Node

*** Node.js Benefits

Let's start by taking a look at why Node.js is one of the fastest growing web
platforms out there.

Node.js provides you with the following benefits:

- Develop faster due to the vast number of modules and reusable code from npm
- Make fewer mistakes and be more productive (One language across the stack)
- Delight your user with fast response time (YMMV)
- Reduce team size and communication overhead (full stack JavaScript)
- Reduce dependency on other teams (e.g., backend API teams)
- Ability to re-use code on the browser and server

*** Node.js Features

Node.js has some distinct features. Here are some examples of those features:

- Non-blocking I/O: performant
- Fast JS engine: browser arms race (Google Chrome V8 and Microsoft Chakra)
- Expressive and interpreted language: don't waste time on setup
- Solid and improving language standard (ECMAScript)
- Built in package manager with a humongous number of packages (npm)

*** Why Node Video and Transcript
[[https://www.youtube.com/embed/eUIPT-sXd3o?controls=0&wmode=transparent&rel=0&showinfo=0&enablejsapi=1&modestbranding=1&cc_load_policy=0&html5=1&origin=https%3A%2F%2Fcourses.edx.org&widgetid=1][Why Node? video]]

{{{heading(Transcript)}}}

You might be wondering, why you should learn Node.js.  And some of you
if you're taking this course, you might already know.  But let me
answer this question and get you excited and tell you all the benefits
why you should learn Node.js.

{{{heading(Tap Into a Lot of NPM Modules)}}}

So first of all Node.js allows you to develop faster, because there
are a lot of modules which you can tap into.  JavaScript, one of the
most popular languages out there, just because the sheer number of
browsers that people use surpasses any other platform.  So you can tap
into the NPM, which is node package manager.  You can tap into the NPM
registry to get pretty much any module.  So sometimes you don't even
have to write that much code.

{{{heading(Learn Just One Language---JavaScript)}}}

Another benefit is that, you have to learn just one language.  With
JavaScript you can develop for the browser, can develop for the server
which is Node.js technology.  And then if you using MongoDB as your
persistence layer, as your database, then you can again leverage
JavaScript.  So with one language, you can basically code everywhere.
That includes mobile and internet of things devices as well.  Embedded
systems which are more and more start to use Node.js as their main
language.

{{{heading(Develop Faster with Node.js)}}}

My favorite benefit is that, I'm developing faster when I use Node.js.
My brain doesn't have to switch between different codes, different
styles, different indexes.  I used to make silly mistakes such as
forgetting a semicolon, or putting a comma in the wrong place, or just
not remembering how to concatenate a string.  And I would have a
documentation in front of me.  Right now, I don't do that because it's
all one language.  The learning is much faster when you just use one
language across all parts of your application.

{{{heading(Decrease Your Team Size with Full Stack JavaScript Developers)}}}

Another reason, if you are leading a team, or you are building your wn
startup, or you're in a management position is that, you can decrease
your team size.  You don't have to have a dedicated backend team
anymore.  Your front end engineers they could develop on the back end
and vice versa.  The new term for such development is full stack
JavaScript developer, or generalized developer.

{{{heading(Powered by Google Chrome V8 Engine)}}}

So, as you can see there are a lot of benefits.  And those benefits,
they're powered by certain characteristics and features of Node.js
such as, Google Chrome V8 engine.  So Google Chrome V8 engine is a
super fast JavaScript engine, which powers Chrome browsers.  And at
the heart of Node.js, you use Google Chrome V8 engine.  Recently,
Microsoft Chakra is also available as the JavaScript engine.  That
tells you that Node.js is super super fast.

{{{heading(Fast Non-Blocking Input-Output System)}}}

Another reason why it's fast, is because Node.js it uses a
non-blocking input and output system.  You see in a lot of Web
applications and a lot of networking applications, what takes a lot of
time.  It's not a heavy CPU process.  Yes. You might do some password
hashing, you might do some sorting of the password, some gzipping, or
encoding.  But that often is not the use case.  Often you make a
request to another service, another database, or you're reading from a
database, writing to a file system.  So, those are input and output
operations.  And while you're waiting, that time could be used.  And
that's why node is so fast and performance because, it utilizes this
waiting time, to serve other clients.  Instead of some other
languages, such as Python or Java.  They cannot utilize that time in
their threads.  They can serve just one client.  Node.js thread can
serve many clients. This is the benefit.  So you can serve more
traffic with the same amount of servers deployed, or you can decrease
the number of servers and cut some cost on your infrastructure.  Those
are some of the benefits of Node.js.

*** Node.js Downsides

Node isn't always the best design choice.  Like most things in life, Node.js
has some downsides.  Node might not be a good fit because of the following
reasons:

- Memory leaks in long running processes with Node are worse than in short
  running browser environments such as browser JavaScript

- The event loop makes asynchronous error handling more difficult than
  synchronous error handling

- No benefit for CPU-bound tasks

- Need to think about scalability early on to develop stateless scalable
  distributed systems

- No built-in typing (but possible with TypeScript)


*Note*: The Event loop is the core of Node.js and it's a genius idea.  However,
don't use Node.js for blocking, CPU-intensive tasks.  Node.js will not give you
a performance boost for stuff like that.  Node.js is best suited for I/O stuff
(like web servers).

*** Node.js Downsides Video and Transcript

[[https://www.youtube.com/embed/Lq6DS7pjGYA?controls=0&wmode=transparent&rel=0&showinfo=0&enablejsapi=1&modestbranding=1&cc_load_policy=0&html5=1&origin=https%3A%2F%2Fcourses.edx.org&widgetid=1][Node.js Downsides video]]

{{{heading(Transcript)}}}

Of course, nothing is all about the upsides.  There are certain
downsides to using Node JS.

{{{heading(Code Runs Asynchronously)}}}

Some of them is that because of it's non-blocking IO nature and the
way you write the asynchronous code, it might be a little bit tough
for engineers and developers who learned synchronous way of coding to
start coding in Node JS.  So you need to think a little bit
differently, you need to change your thinking into thinking in an
asynchronous way when you're coding with JavaScript and especially
with Node JS.  Things such as
- callbacks,
- promises, 
- async/await.


{{{heading(Tooling is not as Mature as Some Programming Environments)}}}

So those features and those syntactic items, they help you to deal
with a asynchronous code.  Another thing is that the tooling might not
be as mature, and the libraries might not be as mature as some of the
languages and platforms which has been around for 10 or 20 years such
as Java for example.  Java ecosystem has been tested and has been used
in many many many projects.  Node JS, it's not in its infancy as it
was when I just started using Node JS, but it's definitely not as
mature as some other frameworks and languages.

** Node in Modern Web Development

{{{heading(Single Page Applications)}}}

Modern web development consists of building front-end applications which
connect to servers to submit or get data.  The front-end applications use the
single-page application approach a.k.a. thick client.  In it, a client app
communicates with a server backend via JSON, GraphQL, Protocol Buffers, XML,
text, binary streams or other formats which are transmitted via HTTP.

{{{heading(Server Acts as a Middleman)}}}

The server communicates with databases and other services.  In other words, the
server acts as a middleman between the front-end application and the database
or other services.  The server does things which the front-end app cannot do:
authentication, data validation, working with a file system, encryption, etc.

{{{heading(Endpoints are Distinguished by HTTP URLs)}}}

The way the server communicates with the front-end app client and vice versa is
by having various endpoints distinguished by URLs in accordance to the HTTP
standard.  Each request for data has URL, headers, and body (a.k.a. payload).

{{{heading(Node.js is used to Implement Backend Servers)}}}

Implementation of servers is where Node comes in.  Node is used to implement
the backend servers which are often JSON RESTful APIs (but they could be of
other formats as well).  Node is on par with stacks such as Apache web
server+PHP or Tomcat+Java.

{{{heading(Express Framework Often Used to Implement Web Applications)}}}

Node is not a framework by itself because it offers very low level mechanisms.
The Express framework is often used to implement web applications and RESTful
API servers in Node.

{{{heading(Maintain Flexibility using SPA and REST API)}}}

Adhering to SPA and REST API architectures for your web applications will give
you the flexibility to leverage your servers for other clients (mobile, IoT,
public) and will allow you to change front-end clients easily because of the
loose coupling provided by the API.

*** Video and Transcript

[[https://www.youtube.com/embed/Djg4rFGffNs?controls=0&wmode=transparent&rel=0&showinfo=0&enablejsapi=1&modestbranding=1&cc_load_policy=0&html5=1&origin=https%3A%2F%2Fcourses.edx.org&widgetid=1][Node in Modern WebDev video]]

{{{heading(The Traditional Approach to Web Development)}}}

What is the place of Node.js in modern web development?  Let's start
with a little bit of history.  In 1990s, in 1995, and early 2000, the
way people did web development, they were building server-side
applications, and those applications they were rendering entire HTML
pages.  Those pages were sent to the client to the browser.  And on
the browser, they would be interpreted maybe some images, maybe some
styling, some simple JavaScript.  That approach is called traditional
approach or fix server, because most of the logic is on the server.

{{{heading(A Newer Method---the Thick Client)}}}

Later on in 2005, 2006, and 2007, people started coming up with a
different approach, thick client.  So, they were moving some of the
logic on the client which is the browser, that allowed to develop
faster applications which responded to user interactions faster
because a lot of the logic, a lot of the code, was now in the browser
and browser also themselves they become faster and better at rendering
the JavaScript language.

{{{heading(The Modern Approach---Single Page Applications)}}}

Now, their approach is similar to the thick client.  We build single
page applications, we build front end applications, and a lot of code
resides in those applications.  On the server, we still do the
validation authentication.  We massage the data which is coming from
the database, we format it.  So we do a lot of things on the back.  So
we still do them, but not as much as we used to do.  A lot of the UI
and the view related logic was moved to the browser.  So, this is how
modern development is done right now.

{{{heading(Some Traditional Technologoies---PHP and Java-Tomcat)}}}

Some of the technologies that people use, PHP is one of the most
popular platforms to build web applications.  That's a server side
technology.  PHP runs in a batch.  Another example would be Tomcat and
Java, Java, it's compiled code which would run in a Tomcat which is
the web server.  So typically, you need a web server and some piece of
technology either compiled or interpreted.  Java would be compiled and
PHP would be interpreted.

{{{heading(Modern Technology Users Node.js for both Client and Server)}}}

In Node.js it's Slightly different because Node.js combines web server
and the language together.  So Node.js in your stack would replace
both Apache web server and PHP or both Tomcat and Java JAR file which
is a compiled Java file.  So Node.js when you write Node.js code, you
build a web server but also you would build your application.

{{{heading(Modern Applications are RESTful API Servers)}}}

And what type of applications do we build?  Well, most of all, we
build restful API servers.  Following restful methodology, we build
stateless servers.  So they shouldn't have any states within them
which would make them easier to scale without the states.  And we
follow the HTTP methodology by using different HTTP methods such as
GET, POST, PUT etc.

{{{heading(GraphQL Technology is even Newer)}}}

Another example would be building a GraphQL server.  GraphQL, it's a
new emergent technology.  GraphQL allows you to reduce the number of
endpoints.  It's still an HTTP protocol.  But by reducing the number
of endpoints, you can submit queries, GraphQL queries as to the
server.

{{{heading(Universal JavaScript)}}}

So, we typically build either restful API or we build GraphQL servers.
But once in a while, we also want to go back and do the server-side
rendering.  This is called Universal JavaScript.  All those approaches
are possible with Node.js.  It's up to your specific case, whether
it's a public facing application such as blog or whether its admin
dashboard which doesn't have to have an SEO.  In all cases, Node.js
will allow you to build fast performance web servers and applications
as well.

* Node Core

* Express Framework

* Persistence with MongoDB

* Working with Mongoose ODM

* Export Settings                                                  :noexport:
#+TEXINFO_FILENAME:intro_nodejs.info
#+TEXINFO_CLASS: info
#+TEXINFO_HEADER:
#+TEXINFO_POST_HEADER:
#+TEXINFO_DIR_CATEGORY:NodeJS
#+TEXINFO_DIR_TITLE:Introduction to NodeJS
#+TEXINFO_DIR_DESC:Introduction to NodeJS by Microsoft
#+TEXINFO_PRINTED_TITLE:Introduction to NodeJS

* Macro Definitions                                                :noexport:
#+macro:heading @@texinfo:@heading $1@@
#+macro:subheading @@texinfo:@subheading $1@@
